{"data":{"site":{"siteMetadata":{"author":{"name":"Samuel Chan","contacts":{"twitter":"@bpmsam"}},"disqusShortname":"","subtitle":"Samuel Chan blogs here about the geekier parts of his life.","title":"Sam Does Blogs","url":"https://blog.samuelchan.dev"}},"markdownRemark":{"id":"64cb695b-1b52-5bf0-8deb-899176191707","html":"<p>When you’re writing server side scripts, they are of course written in JS. This means you’re able to use some of the\nshorter forms of initialising Business Objects just like you do in JS in other contexts such as in the browser\n(e.g.: CSHS) and Node.js.</p>\n<h2 id=\"the-standard-way\"><a href=\"#the-standard-way\" aria-label=\"the standard way permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Standard Way</h2>\n<p>This is the way you’re taught to work with business objects:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myNvp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tw<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>NameValuePair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myNvp<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myNvp<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span></code></pre></div>\n<p>There’s nothing actually wrong about this simple example. It’s only a few lines and it’s obvious what it’s doing.</p>\n<p>But what about this one:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tw<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>MySpecialObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myNumber <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myString <span class=\"token operator\">=</span> <span class=\"token string\">'hi'</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tw<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>NameValuePair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tw<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>listOf<span class=\"token punctuation\">.</span>ComplexObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tw<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>ComplexObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>keyPair <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tw<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>NameValuePair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>keyPair<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Toast'</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>keyPair<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'Bread'</span></code></pre></div>\n<p>Now, this is getting a little hard to read and hard to refactor. So how should you be doing it instead?</p>\n<h2 id=\"initialising-objects\"><a href=\"#initialising-objects\" aria-label=\"initialising objects permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initialising Objects</h2>\n<p>You can initialise any regular business object (except <code class=\"language-text\">Map</code>, <code class=\"language-text\">ANY</code>) with just the JS object literal syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you want to write values to properties, it’s exactly as you expect (note this is the short form of the first example):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myNvp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All the properties of the objects you don’t provide values for remain undefined.</p>\n<h2 id=\"initialising-lists\"><a href=\"#initialising-lists\" aria-label=\"initialising lists permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initialising Lists</h2>\n<p>And similarly with lists, you can initialise them with arrays:</p>\n<p>Instead of this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tw<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>listOf<span class=\"token punctuation\">.</span>MyObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can do just this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>And to assign values, you can also combine it with the above:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myListOfMyObjects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    myNum<span class=\"token punctuation\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    myString<span class=\"token punctuation\">:</span> <span class=\"token string\">'123'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    myNum<span class=\"token punctuation\">:</span> <span class=\"token number\">321</span><span class=\"token punctuation\">,</span>\n    myString<span class=\"token punctuation\">:</span> <span class=\"token string\">'321'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"gotchas\"><a href=\"#gotchas\" aria-label=\"gotchas permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gotchas</h2>\n<ul>\n<li>\n<p>You cannot initialise lists of <code class=\"language-text\">Integer</code>, <code class=\"language-text\">Decimal</code>, or <code class=\"language-text\">Boolean</code>. You will get an error like this:</p>\n<blockquote>\n<p>Type mismatch. Value “org.mozilla.javascript.NativeArray@eee2edf1” must be array. Java class found: org.mozilla.javascript.NativeArray</p>\n</blockquote>\n<p>You’ll have to initialise these the old fashioned way:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">tw.local.myListOfDecimals = new tw.object.listOf.Decimal() </code></pre></div>\n</li>\n<li>\n<p>You cannot mix TW objects and native JS objects when assigning. I’ve personally not run into this very much.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    myNvp<span class=\"token punctuation\">:</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myInputNvp\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You will get an error like:</p>\n<blockquote>\n<p>The conversion of obj org.mozilla.javascript.NativeObject to TWObject is not valid.</p>\n</blockquote>\n<p>If you have to do this, you’ll have to break it down like so.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    myNvp<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myInpupNvp<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n        value<span class=\"token punctuation\">:</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myInpupNvp<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The same applies for dates. You can use a normal JS date or convert your TW date into a JS date if you must use\nthis syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    aDate<span class=\"token punctuation\">:</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>someDate<span class=\"token punctuation\">.</span><span class=\"token function\">toNativeDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>However</strong>, you can use the literal array syntax with TW types inside it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myNvp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tw<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>NameValuePair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myNvps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myNvp<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>You will lose out on autocomplete for objects inside the braces. The editors won’t be able to suggest property or\nmethod names when you’re editing. And in the same way, it won’t be able to suggest when you type a property name wrong.\nThis shouldn’t stop you from writing the code above, as the benefits you get from readability greatly outweigh the few\nextra seconds it takes you to screenshot or remember the object structure.</p>\n</li>\n</ul>\n<h2 id=\"usage-examples\"><a href=\"#usage-examples\" aria-label=\"usage examples permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage examples</h2>\n<ul>\n<li>\n<p>When you’ve got a JS object converted from a JSON string via JSON.parse</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>jsonStr<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Instead of:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sourceObject <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>jsonStr<span class=\"token punctuation\">)</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tw<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>MySpecialObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myNumber <span class=\"token operator\">=</span> sourceObject<span class=\"token punctuation\">.</span>someNumber\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myString <span class=\"token operator\">=</span> sourceObject<span class=\"token punctuation\">.</span>someString\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">tw<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>NameValuePair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> sourceObject<span class=\"token punctuation\">.</span>someObject<span class=\"token punctuation\">.</span>key\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>myObject<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> sourceObject<span class=\"token punctuation\">.</span>someObject<span class=\"token punctuation\">.</span>value</code></pre></div>\n</li>\n<li>\n<p>It’s easier to use native JS methods than using the more limited methods on TW objects or lists.</p>\n<p>For example you’re mapping data from an integration call:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>returnData\n<span class=\"token keyword\">var</span> outputData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">.</span>listLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    outputData<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        prop1<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span>fooProp<span class=\"token punctuation\">,</span>\n        prop2<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span>barProp\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList <span class=\"token operator\">=</span> outputData</code></pre></div>\n<p>I would prefer to write this as:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList <span class=\"token operator\">=</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>returnData<span class=\"token punctuation\">.</span><span class=\"token function\">listToNativeArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        prop1<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">,</span>\n        prop2<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>bar\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Much better.</p>\n</li>\n</ul>\n<h2 id=\"wrapping-things-up\"><a href=\"#wrapping-things-up\" aria-label=\"wrapping things up permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wrapping things up</h2>\n<p>JavaScript in BPM is just like the JavaScript used elsewhere (albeit a little older than the browser JS). The key thing\nto understand is how the ‘native’ JS objects interact with the ‘TeamWorks’ types (which are mapped to Java objects).</p>\n<p>If you find yourself writing more than a few lines of code handling TW objects, you might find it’s easier to simply\nwork in native JS and then at the very end, assigning it once to the TW object. </p>","fields":{"slug":"/posts/initialising-business-objects-the-better-way/","tagSlugs":["/tag/javascript/","/tag/business-object/","/tag/optimisation/","/tag/ibm-bpm/"]},"frontmatter":{"date":"2019-03-25T11:00:00.000Z","description":"IBM BPM uses JavaScript as the scripting language, but do you know how to make the most out of it in your projects?","tags":["javascript","business object","optimisation","ibm bpm"],"title":"Initialising Business Objects, The Better Way"}}},"pageContext":{"slug":"/posts/initialising-business-objects-the-better-way/"}}