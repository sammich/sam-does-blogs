{"data":{"site":{"siteMetadata":{"author":{"name":"Samuel Chan","contacts":{"twitter":"#"}},"disqusShortname":"","subtitle":"Samuel Chan blogs here about the geekier parts of his life.","title":"Sam Does Blogs","url":"https://blog.samuelchan.dev"}},"markdownRemark":{"id":"27541ca9-ba67-5f78-aa3b-2167e316cd31","html":"<p>Continuing on from my <a href=\"/posts/initialising-business-objects-the-better-way/\">earlier post</a> which demonstrated better\nways of initialising business objects, this post will explore the same with lists in IBM BPM.</p>\n<p><em>tl;dr: using <code class=\"language-text\">listToNativeArray</code> with lists not only makes your code better, it also makes it really fast!</em></p>\n<h2 id=\"the-standard-way\"><a href=\"#the-standard-way\" aria-label=\"the standard way permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The standard way</h2>\n<p>When processing a list to extract, transform, or map values, you are likely to rely on the age-old method of the\nfor-loop:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList<span class=\"token punctuation\">.</span>listLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something with tw.local.myList[i]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"theres-a-better-way\"><a href=\"#theres-a-better-way\" aria-label=\"theres a better way permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>There’s a better way…</h2>\n<p><img src=\"/media/morpheus-forloop.jpg\" alt=\"morpheus-forloop.jpg\"></p>\n<p>What I’m going to show next is not only going to make it more pleasant to work with lists in IBM BPM, but that it’s also\nmuch faster than the for-loop. So even if you set aside micro-benchmarks, there’s actually a big code-readability win.</p>\n<p>When working with lists you don’t have any of the native JS array methods even though you’re writing the code in JS and\nyou’re looping through something that behaves like an array - if there was only a way to turn a list into a JS array…</p>\n<h2 id=\"enter-listtonativearray\"><a href=\"#enter-listtonativearray\" aria-label=\"enter listtonativearray permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enter ‘listToNativeArray’</h2>\n<p>This method is the magic that makes it all possible. With it, you get a native JS array that you can use to iterate\nthrough your lists. Each item in the list is of the type of the list you had before, that is, you now have an array of\nbusiness objects (or strings/numbers/boolean, etc.).</p>\n<p>All the iterator methods you can take advantage of:</p>\n<ul>\n<li>forEach</li>\n<li>map</li>\n<li>filter</li>\n<li>reduce/reduceRight</li>\n<li>some/every</li>\n</ul>\n<p>And the other array methods:</p>\n<ul>\n<li>join</li>\n<li>reverse</li>\n<li>shift/unshift</li>\n<li>splice</li>\n<li>concat</li>\n<li>slice</li>\n<li>indexOf/lastIndexOf (when working objects, this method compares by reference)</li>\n</ul>\n<p>For docs on how to use these methods, see the excellent <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Mozilla web developer docs</a>.</p>\n<h2 id=\"before-the-main-event-a-special-word-about-for-loops\"><a href=\"#before-the-main-event-a-special-word-about-for-loops\" aria-label=\"before the main event a special word about for loops permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Before the main event, a special word about for-loops</h2>\n<p>For-loops have their place in the world. Currently, JS doesn’t have a native way to generate a range (but there’s <a href=\"https://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-a-range-within-the-supp\">a few\nworkarounds</a>)\nso you might still use it for that.</p>\n<p>In every other case, in my IBM BPM development, and in my web development projects in Node.js/React, I’ve stopped\nusing for-loops. Once you start getting into the habit/pattern of using iterators instead, you’ll see why.</p>\n<p>Lets begin.</p>\n<h2 id=\"iterating-through-a-list\"><a href=\"#iterating-through-a-list\" aria-label=\"iterating through a list permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterating through a list</h2>\n<p><strong>The basic example</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList<span class=\"token punctuation\">.</span>listLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something with tw.local.myList[i]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Becomes</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList<span class=\"token punctuation\">.</span><span class=\"token function\">listToNativeArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something with item</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And, to really hammer it home - <strong>a nested example</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList<span class=\"token punctuation\">.</span>listLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>listLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do something with the tw.local.myList[i].cookies[j]</span>\n    <span class=\"token punctuation\">}</span>    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Becomes</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList<span class=\"token punctuation\">.</span><span class=\"token function\">listToNativeArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    item<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">listToNativeArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do something with the cookie</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>So much easier to read. No more magic variables. No more deep property dot-notation diving.</p>\n<h3 id=\"examples\"><a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h3>\n<ul>\n<li>\n<p>adding to the end of the list</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// instead of this</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList<span class=\"token punctuation\">[</span>tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList<span class=\"token punctuation\">.</span>listLength<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> myObject\n\n<span class=\"token comment\">// do this</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList<span class=\"token punctuation\">.</span><span class=\"token function\">listToNativeArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>transform a list from an integration to a business object (using patterns from my <a href=\"/posts/initialising-business-objects-the-better-way/\">earlier object initialisation post</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// instead of this</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>integrationResult<span class=\"token punctuation\">.</span>listLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        foo<span class=\"token punctuation\">:</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>integrationResult<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">,</span>\n        prop<span class=\"token punctuation\">:</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>integrationResult<span class=\"token punctuation\">.</span>perty\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// do this</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myList <span class=\"token operator\">=</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>integrationResult<span class=\"token punctuation\">.</span><span class=\"token function\">listToNativeArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        foo<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">,</span>\n        prop<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>perty\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>filter items out from your list, such as overdue tasks</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// instead of this</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myOverdueTasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myTasks<span class=\"token punctuation\">.</span>listLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myTasks<span class=\"token punctuation\">.</span>isOverdue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myOverdueTasks<span class=\"token punctuation\">.</span><span class=\"token function\">insertIntoList</span><span class=\"token punctuation\">(</span>tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myOverdueTasks<span class=\"token punctuation\">.</span>listLength<span class=\"token punctuation\">,</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myTasks<span class=\"token punctuation\">)</span>          \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// do this</span>\ntw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myOverdueTasks <span class=\"token operator\">=</span> tw<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span>myTasks<span class=\"token punctuation\">.</span><span class=\"token function\">listToNativeArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> task<span class=\"token punctuation\">.</span>isOverdue\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"a-word-on-performance\"><a href=\"#a-word-on-performance\" aria-label=\"a word on performance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A word on performance</h2>\n<p>Before I started using the pattern I’m writing about here, I hadn’t considered if there was a performance penalty. In\nmy mind, whatever it was, it was worth it because of the other benefits, such as reduced chance of bugs.</p>\n<p>As part of my preparation for this post, I decided to test once and for all how the two compared in performance. My\nexpectations? It was at best equal, otherwise slower than the for-loop - after all, we were calling a method which\nreturns us a newly instantiated array with full copies of the BOs inside it.</p>\n<p>And so here are the results (<a href=\"https://gist.github.com/sammich/cb616321c3699ec1d4550b0fb4260fe8\">benchmark code</a>):</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Case</th>\n<th align=\"right\">Iterations</th>\n<th align=\"right\">List Size</th>\n<th align=\"right\">For-loop (ms)</th>\n<th align=\"right\">Iterator (ms)</th>\n<th align=\"right\">Improvement</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">1</td>\n<td align=\"right\">1000</td>\n<td align=\"right\">100</td>\n<td align=\"right\">838</td>\n<td align=\"right\">271</td>\n<td align=\"right\">3.10x</td>\n</tr>\n<tr>\n<td align=\"right\">2</td>\n<td align=\"right\">1000</td>\n<td align=\"right\">10</td>\n<td align=\"right\">83</td>\n<td align=\"right\">37</td>\n<td align=\"right\">2.26x</td>\n</tr>\n<tr>\n<td align=\"right\">3</td>\n<td align=\"right\">10000</td>\n<td align=\"right\">1</td>\n<td align=\"right\">136</td>\n<td align=\"right\">104</td>\n<td align=\"right\">1.30x</td>\n</tr>\n</tbody>\n</table>\n<p>What the results here show is that even in the worst case where a list of a single item has ‘listToNativeArray’ called\non it, it still manages to outperform the for-loop in the most optimised case.</p>\n<p>In the least optimised case (see the function <code class=\"language-text\">test1c</code> in the benchmark code) - which is the form I suspect most are\nusing, I’m seeing a 7.56x speed up in <strong>Case 1</strong>, and a 2.45x speed up in <strong>Case 3</strong>.</p>\n<h2 id=\"seems-like-a-clear-winner-right\"><a href=\"#seems-like-a-clear-winner-right\" aria-label=\"seems like a clear winner right permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Seems like a clear winner, right?</h2>\n<p>In my eyes, yes.</p>\n<p>The only thing you will lose here is the autocomplete of variables in the Process Designer. Which may be a big deal for\nsome of you. For me, it’s worth it, and I highly suggest you try it out.</p>\n<p>(btw, if you noticed the infinite loop bug in the for-loop somewhere above, have a 🍪)</p>","fields":{"slug":"/posts/working-with-ibm-bpm-lists-js/","tagSlugs":["/tag/javascript/","/tag/tips/","/tag/business-objects/","/tag/optimisation/","/tag/performance/","/tag/ibm-bpm/","/tag/lists/","/tag/teamworks/"]},"frontmatter":{"date":"2019-03-31T11:00:00.000Z","description":"Working with IBM BPM lists isn't very JavaScript-y at all. What if there's a better (and faster) way?","tags":["javascript","tips","business objects","optimisation","performance","ibm bpm","lists","teamworks"],"title":"There has to be a better way of working with lists"}}},"pageContext":{"slug":"/posts/working-with-ibm-bpm-lists-js/"}}